import ipaddress
import pandas as pd


ip_input= ['192.168.0.1', 
           "1.2.10.1",
           '1.0.242.174',
           '1.0.247.98',
           '1.0.2.4',
           '2001:0db8:85a3:0000:0000::2:7335']

    
ip_input = [ipaddress.ip_address(i) for i in ip_input]

#print([i for i in ip_input])
     
net_list = ["1.0.1.0/24",
"1.0.2.0/23",
"1.0.8.0/21",
"1.0.32.0/19",
"1.0.128.0/19",
"1.0.157.168/32",
"1.0.173.170/32",
"1.0.192.0/19",
"1.0.224.0/19",
"1.0.242.175/32",
"1.0.247.102/32",
"1.0.248.0/21",
"1.1.0.0/24",
"1.1.1.4/32",
"1.1.2.0/23",
"1.1.4.0/22",
"1.1.8.0/21",
"1.1.16.0/20",
"1.1.32.0/19",
"1.1.137.20/32",
"1.1.152.237/32"
]
net_list = [ipaddress.ip_interface(i).network for i in net_list]
#print(net_list)
# This is a list of a list
#I need 
#print([len([n.hosts()]) for n in net_list])

#ipaddress.ip_address(ip_input[4]) in ipaddress.ip_interface(net_list[0]).network

#for x in list(net_list[0].hosts()):
#print(list(enumerate(net_list)))
#print(list(enumerate([list(n.hosts()) for n in net_list])))
ip_mit= []
for index, i in enumerate([list(n.hosts()) for n in net_list]):
    for j in range(0, len(ip_input)):
        if ip_input[j] in i:
             print(f"{ip_input[j]} appeared in a search against {ipaddress.ip_interface(i[index])}")
             ip_mit.append(str(ip_input[j]))
        else:
            #print(f"{ip_input[j]} is not currently mitigated.")
            continue
    else:
        continue
    
print(ip_mit)
        # ip_objects = [str(ipaddress.ip_address(i)) for i in ip_input]
        # self.df_ref = self.df1.loc[self.df1['CIDR'].isin(ip_objects)]
        #net_list = self.df1['CIDR'].tolist() # mitigation list of IP's

        # not_ips = [] # placeholder for following parse loop
        
        # self.ip_mit = pd.DataFrame(columns=['Mitigated', 'First Binary', "Last Binary", "CIDR", "Task Order", "Date Issued", "EvalReason","Threat Report", "Comments", "Notes", "Scope"])
        # for index, i in enumerate([list(ipaddress.ip_network(n).hosts()) for n in self.df1['CIDR'].tolist()]):
        #     for x in range(0, len(ip_input)):
        #         if ip_input[x] in i:
        #             not_ips.append(str(ip_input[x]))
        #         else:
        #             print(f"{ip_input[x]} is not currently mitigated")
        #             pass
        #     else:
        #         continue

        # print(not_ips)
        # self.ip_mit['CIDR'] = not_ips
        # return self.df_ref
        # try:
        #     self.df_ref = self.df1.loc[self.df1["CIDR"]==[i for i in ip_input]]
        #     print(self.df_ref.head())
        #     self.ip_mit["CIDR"] = [i for i in ip_input if i not in net_list]
        #     print(self.ip_mit.head())
        # except: 
        #     pass

        # for network in net_list:
        #     for ip in range(0, len(ip_input)):
        #         if ipaddress.ip_address(ip_input[ip]) in ipaddress.ip_interface(network).network:
        #             pass
        #             #not_ips.append(ip_input[ip])
        #         elif ip_input[ip] not in not_ips:
        #             not_ips.append(ip_input[ip])
        #             pass
                
        # print(f" ips in not ip list: {not_ips}")
        # # df instantiation and column names
        # self.ip_mit = pd.DataFrame(columns=['Mitigate', 'First Binary', "Last Binary", "CIDR", "Task Order", "Date Issued", "EvalReason","Threat Report", "Comments", "Notes", "Scope"])
        # self.ip_mit['CIDR'] = [str(ipaddress.ip_network(i)) for i in not_ips]
        # self.ip_mit['First Binary'] = [str(list(ipaddress.ip_network(i).hosts())[0]) for i in not_ips]
        # self.ip_mit['Last Binary'] = [str(list(ipaddress.ip_network(i).hosts())[-1]) for i in not_ips]
        # print(self.ip_mit.head())
        # #print(type(self.ip_mit))
        # try:
        #     #not_ips = [ipaddress.ip_network(ipaddress.ip_address(i))[0] for i in not_ips]
        #     #self.not_ips = [i for i in self.ip_input if i not in net_list]
        #     self.df_ref = self.df1.loc[self.df1["CIDR"].isin(list(self.ip_mit['CIDR']))]
        #     print(self.df_ref.head())
        #     #print(self.df_ref.head())
        #     #print(type(self.df_ref))
            
        #     self.ip_mit['CIDR'] = [str(ipaddress.ip_network(i)) for i in not_ips]
        #     self.ip_mit['First Binary'] = [str(list(ipaddress.ip_network(i).hosts())[0]) for i in not_ips]
        #     self.ip_mit['Last Binary'] = [str(list(ipaddress.ip_network(i).hosts())[-1]) for i in not_ips]
        #      #return self.ip_mit
        #     #print(ip_mit)
        #     #print(self.ip_mit['Last Binary'])
        #     #self.df_ref.insert(0, "Mitigated", ["Mitigated" for i in range(len(self.df_ref.index))])
        #     return self.df_ref#self.df1.loc[self.df1["CIDR"].isin(ips)] # 
        # except: 
        #     messagebox.showerror("I am Error", f"{[i for i in ip_input]} encountered an error")
